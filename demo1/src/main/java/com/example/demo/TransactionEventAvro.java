/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.demo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TransactionEventAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3442686603622194901L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionEventAvro\",\"namespace\":\"com.example.demo\",\"fields\":[{\"name\":\"transactionID\",\"type\":\"string\"},{\"name\":\"customerID\",\"type\":\"string\"},{\"name\":\"accountNumber\",\"type\":\"string\"},{\"name\":\"atmID\",\"type\":\"string\"},{\"name\":\"atmAddress\",\"type\":\"string\"},{\"name\":\"transactionAmount\",\"type\":\"double\"},{\"name\":\"transactionType\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TransactionEventAvro> ENCODER =
      new BinaryMessageEncoder<TransactionEventAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionEventAvro> DECODER =
      new BinaryMessageDecoder<TransactionEventAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionEventAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionEventAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionEventAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionEventAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionEventAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionEventAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionEventAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionEventAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence transactionID;
   private java.lang.CharSequence customerID;
   private java.lang.CharSequence accountNumber;
   private java.lang.CharSequence atmID;
   private java.lang.CharSequence atmAddress;
   private double transactionAmount;
   private java.lang.CharSequence transactionType;
   private java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionEventAvro() {}

  /**
   * All-args constructor.
   * @param transactionID The new value for transactionID
   * @param customerID The new value for customerID
   * @param accountNumber The new value for accountNumber
   * @param atmID The new value for atmID
   * @param atmAddress The new value for atmAddress
   * @param transactionAmount The new value for transactionAmount
   * @param transactionType The new value for transactionType
   * @param timestamp The new value for timestamp
   */
  public TransactionEventAvro(java.lang.CharSequence transactionID, java.lang.CharSequence customerID, java.lang.CharSequence accountNumber, java.lang.CharSequence atmID, java.lang.CharSequence atmAddress, java.lang.Double transactionAmount, java.lang.CharSequence transactionType, java.time.Instant timestamp) {
    this.transactionID = transactionID;
    this.customerID = customerID;
    this.accountNumber = accountNumber;
    this.atmID = atmID;
    this.atmAddress = atmAddress;
    this.transactionAmount = transactionAmount;
    this.transactionType = transactionType;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionID;
    case 1: return customerID;
    case 2: return accountNumber;
    case 3: return atmID;
    case 4: return atmAddress;
    case 5: return transactionAmount;
    case 6: return transactionType;
    case 7: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionID = (java.lang.CharSequence)value$; break;
    case 1: customerID = (java.lang.CharSequence)value$; break;
    case 2: accountNumber = (java.lang.CharSequence)value$; break;
    case 3: atmID = (java.lang.CharSequence)value$; break;
    case 4: atmAddress = (java.lang.CharSequence)value$; break;
    case 5: transactionAmount = (java.lang.Double)value$; break;
    case 6: transactionType = (java.lang.CharSequence)value$; break;
    case 7: timestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionID' field.
   * @return The value of the 'transactionID' field.
   */
  public java.lang.CharSequence getTransactionID() {
    return transactionID;
  }


  /**
   * Sets the value of the 'transactionID' field.
   * @param value the value to set.
   */
  public void setTransactionID(java.lang.CharSequence value) {
    this.transactionID = value;
  }

  /**
   * Gets the value of the 'customerID' field.
   * @return The value of the 'customerID' field.
   */
  public java.lang.CharSequence getCustomerID() {
    return customerID;
  }


  /**
   * Sets the value of the 'customerID' field.
   * @param value the value to set.
   */
  public void setCustomerID(java.lang.CharSequence value) {
    this.customerID = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.CharSequence getAccountNumber() {
    return accountNumber;
  }


  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.CharSequence value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'atmID' field.
   * @return The value of the 'atmID' field.
   */
  public java.lang.CharSequence getAtmID() {
    return atmID;
  }


  /**
   * Sets the value of the 'atmID' field.
   * @param value the value to set.
   */
  public void setAtmID(java.lang.CharSequence value) {
    this.atmID = value;
  }

  /**
   * Gets the value of the 'atmAddress' field.
   * @return The value of the 'atmAddress' field.
   */
  public java.lang.CharSequence getAtmAddress() {
    return atmAddress;
  }


  /**
   * Sets the value of the 'atmAddress' field.
   * @param value the value to set.
   */
  public void setAtmAddress(java.lang.CharSequence value) {
    this.atmAddress = value;
  }

  /**
   * Gets the value of the 'transactionAmount' field.
   * @return The value of the 'transactionAmount' field.
   */
  public double getTransactionAmount() {
    return transactionAmount;
  }


  /**
   * Sets the value of the 'transactionAmount' field.
   * @param value the value to set.
   */
  public void setTransactionAmount(double value) {
    this.transactionAmount = value;
  }

  /**
   * Gets the value of the 'transactionType' field.
   * @return The value of the 'transactionType' field.
   */
  public java.lang.CharSequence getTransactionType() {
    return transactionType;
  }


  /**
   * Sets the value of the 'transactionType' field.
   * @param value the value to set.
   */
  public void setTransactionType(java.lang.CharSequence value) {
    this.transactionType = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new TransactionEventAvro RecordBuilder.
   * @return A new TransactionEventAvro RecordBuilder
   */
  public static com.example.demo.TransactionEventAvro.Builder newBuilder() {
    return new com.example.demo.TransactionEventAvro.Builder();
  }

  /**
   * Creates a new TransactionEventAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionEventAvro RecordBuilder
   */
  public static com.example.demo.TransactionEventAvro.Builder newBuilder(com.example.demo.TransactionEventAvro.Builder other) {
    if (other == null) {
      return new com.example.demo.TransactionEventAvro.Builder();
    } else {
      return new com.example.demo.TransactionEventAvro.Builder(other);
    }
  }

  /**
   * Creates a new TransactionEventAvro RecordBuilder by copying an existing TransactionEventAvro instance.
   * @param other The existing instance to copy.
   * @return A new TransactionEventAvro RecordBuilder
   */
  public static com.example.demo.TransactionEventAvro.Builder newBuilder(com.example.demo.TransactionEventAvro other) {
    if (other == null) {
      return new com.example.demo.TransactionEventAvro.Builder();
    } else {
      return new com.example.demo.TransactionEventAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionEventAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionEventAvro>
    implements org.apache.avro.data.RecordBuilder<TransactionEventAvro> {

    private java.lang.CharSequence transactionID;
    private java.lang.CharSequence customerID;
    private java.lang.CharSequence accountNumber;
    private java.lang.CharSequence atmID;
    private java.lang.CharSequence atmAddress;
    private double transactionAmount;
    private java.lang.CharSequence transactionType;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.demo.TransactionEventAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionID)) {
        this.transactionID = data().deepCopy(fields()[0].schema(), other.transactionID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerID)) {
        this.customerID = data().deepCopy(fields()[1].schema(), other.customerID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.atmID)) {
        this.atmID = data().deepCopy(fields()[3].schema(), other.atmID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.atmAddress)) {
        this.atmAddress = data().deepCopy(fields()[4].schema(), other.atmAddress);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.transactionAmount)) {
        this.transactionAmount = data().deepCopy(fields()[5].schema(), other.transactionAmount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[6].schema(), other.transactionType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionEventAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.demo.TransactionEventAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactionID)) {
        this.transactionID = data().deepCopy(fields()[0].schema(), other.transactionID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerID)) {
        this.customerID = data().deepCopy(fields()[1].schema(), other.customerID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[2].schema(), other.accountNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.atmID)) {
        this.atmID = data().deepCopy(fields()[3].schema(), other.atmID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.atmAddress)) {
        this.atmAddress = data().deepCopy(fields()[4].schema(), other.atmAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.transactionAmount)) {
        this.transactionAmount = data().deepCopy(fields()[5].schema(), other.transactionAmount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.transactionType)) {
        this.transactionType = data().deepCopy(fields()[6].schema(), other.transactionType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'transactionID' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionID() {
      return transactionID;
    }


    /**
      * Sets the value of the 'transactionID' field.
      * @param value The value of 'transactionID'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setTransactionID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transactionID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionID' field has been set.
      * @return True if the 'transactionID' field has been set, false otherwise.
      */
    public boolean hasTransactionID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionID' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearTransactionID() {
      transactionID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerID' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerID() {
      return customerID;
    }


    /**
      * Sets the value of the 'customerID' field.
      * @param value The value of 'customerID'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setCustomerID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerID' field has been set.
      * @return True if the 'customerID' field has been set, false otherwise.
      */
    public boolean hasCustomerID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerID' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearCustomerID() {
      customerID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountNumber() {
      return accountNumber;
    }


    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setAccountNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.accountNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearAccountNumber() {
      accountNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'atmID' field.
      * @return The value.
      */
    public java.lang.CharSequence getAtmID() {
      return atmID;
    }


    /**
      * Sets the value of the 'atmID' field.
      * @param value The value of 'atmID'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setAtmID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.atmID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'atmID' field has been set.
      * @return True if the 'atmID' field has been set, false otherwise.
      */
    public boolean hasAtmID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'atmID' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearAtmID() {
      atmID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'atmAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getAtmAddress() {
      return atmAddress;
    }


    /**
      * Sets the value of the 'atmAddress' field.
      * @param value The value of 'atmAddress'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setAtmAddress(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.atmAddress = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'atmAddress' field has been set.
      * @return True if the 'atmAddress' field has been set, false otherwise.
      */
    public boolean hasAtmAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'atmAddress' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearAtmAddress() {
      atmAddress = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionAmount' field.
      * @return The value.
      */
    public double getTransactionAmount() {
      return transactionAmount;
    }


    /**
      * Sets the value of the 'transactionAmount' field.
      * @param value The value of 'transactionAmount'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setTransactionAmount(double value) {
      validate(fields()[5], value);
      this.transactionAmount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionAmount' field has been set.
      * @return True if the 'transactionAmount' field has been set, false otherwise.
      */
    public boolean hasTransactionAmount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'transactionAmount' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearTransactionAmount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionType() {
      return transactionType;
    }


    /**
      * Sets the value of the 'transactionType' field.
      * @param value The value of 'transactionType'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setTransactionType(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.transactionType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionType' field has been set.
      * @return True if the 'transactionType' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'transactionType' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearTransactionType() {
      transactionType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[7], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.example.demo.TransactionEventAvro.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionEventAvro build() {
      try {
        TransactionEventAvro record = new TransactionEventAvro();
        record.transactionID = fieldSetFlags()[0] ? this.transactionID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customerID = fieldSetFlags()[1] ? this.customerID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.accountNumber = fieldSetFlags()[2] ? this.accountNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.atmID = fieldSetFlags()[3] ? this.atmID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.atmAddress = fieldSetFlags()[4] ? this.atmAddress : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.transactionAmount = fieldSetFlags()[5] ? this.transactionAmount : (java.lang.Double) defaultValue(fields()[5]);
        record.transactionType = fieldSetFlags()[6] ? this.transactionType : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.time.Instant) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionEventAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionEventAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionEventAvro>
    READER$ = (org.apache.avro.io.DatumReader<TransactionEventAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










